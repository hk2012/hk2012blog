{
    "version": "https://jsonfeed.org/version/1",
    "title": "流年印记 • All posts by \"c\" category",
    "description": "数学 & 软件工程",
    "home_page_url": "https://hk2012.github.io",
    "items": [
        {
            "id": "https://hk2012.github.io/2024/04/10/other/u%E7%9B%BE/",
            "url": "https://hk2012.github.io/2024/04/10/other/u%E7%9B%BE/",
            "title": "U盾项目代码熟悉",
            "date_published": "2024-04-10T11:09:00.000Z",
            "content_html": "<h1 id=\"demo1-nativehost_2_v1\"><a class=\"anchor\" href=\"#demo1-nativehost_2_v1\">#</a> demo1 - nativehost_2_v1</h1>\n<h1 id=\"natchost-v1\"><a class=\"anchor\" href=\"#natchost-v1\">#</a> natchost-v1</h1>\n<h2 id=\"stdafxh-文件\"><a class=\"anchor\" href=\"#stdafxh-文件\">#</a> StdAfx.h 文件</h2>\n<ul>\n<li>\n<p>StdAfx.h 头文件代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>AFX_STDAFX_H__A2E71064_82CE_4D09_9427_F957E26039E0__INCLUDED_<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AFX_STDAFX_H__A2E71064_82CE_4D09_9427_F957E26039E0__INCLUDED_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">_MSC_VER <span class=\"token operator\">></span> <span class=\"token number\">1000</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// _MSC_VER > 1000</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// TODO: reference additional headers your program requires here</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// AFX_INSERT_LOCATION</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !defined(AFX_STDAFX_H__A2E71064_82CE_4D09_9427_F957E26039E0__INCLUDED_)</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>代码解释<br />\n这个头文件是一个预编译头文件（Precompiled Header File），通常在使用 Microsoft Visual C++ 编译器编译的项目中会看到这样的文件。这个头文件的作用是包含一些系统标准头文件或者项目特定的头文件，这些头文件在整个项目中被频繁使用，但是不经常修改。通过将它们包含在预编译头文件中，可以提高编译速度。</p>\n</li>\n<li>\n<p>下面是对这个头文件中的各部分的解释：</p>\n<ol>\n<li>\n<p>#if !defined(AFX_STDAFX_H__A2E71064_82CE_4D09_9427_F957E26039E0__INCLUDED_)：<br />\n这行代码是一个条件预处理指令，它检查在编译时是否定义了宏 AFX_STDAFX_H__A2E71064_82CE_4D09_9427_F957E26039E0__INCLUDED_。如果这个宏没有被定义，就执行 #define AFX_STDAFX_H__A2E71064_82CE_4D09_9427_F957E26039E0__INCLUDED_ 这行代码，防止头文件被多次包含。</p>\n</li>\n<li>\n<p>#if _MSC_VER &gt; 1000：<br />\n这行代码是针对 Microsoft Visual C++ 编译器的条件预处理指令。它检查编译器的版本是否大于 1000，如果是，则执行 #pragma once，这是一种防止头文件被多次包含的更现代的方法。这样做可以提高编译效率，避免重复编译。</p>\n</li>\n<li>\n<p>// TODO: reference additional headers your program requires here：<br />\n这是一个注释，提示程序员在这里引用项目中需要的其他头文件。</p>\n</li>\n<li>\n<p>AFX_INSERT_LOCATION：<br />\n这两行标记了 Visual C++ 的编辑器在向此文件插入其他标记之前应插入额外的声明的位置。这样做是为了确保预编译头文件之后仍然能够正确地引入其他声明。</p>\n</li>\n<li>\n<p>#endif 表示: !defined (AFX_STDAFX_H__A2E71064_82CE_4D09_9427_F957E26039E0__INCLUDED_)：<br />\n这行代码结束了条件预处理指令的块，并且标记着这个头文件的结尾。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"natchost-files-source-files\"><a class=\"anchor\" href=\"#natchost-files-source-files\">#</a> natchost files Source Files</h2>\n<h3 id=\"natchostcpp\"><a class=\"anchor\" href=\"#natchostcpp\">#</a> natchost.cpp</h3>\n<h4 id=\"源代码\"><a class=\"anchor\" href=\"#源代码\">#</a> 源代码</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdafx.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;io.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;json/json.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_LEN</span> <span class=\"token expression\"><span class=\"token number\">4096</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>CONNECTPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>COLLSNPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>COLLIDPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>COLLFPRPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>DELFPPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>VERIFYPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 从标准输入输出接收数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">char</span> g_input<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 写日志函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 读取标准输入的数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">get_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 处理结束符</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">handle_EOF</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 拼接数组</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">arr_cat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>string <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>string src<span class=\"token punctuation\">,</span> string sub<span class=\"token punctuation\">,</span> string dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>HINSTANCE WLinst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 返回 0 为成功，其他值是失败</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置数据流模式结果</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">char</span> reclog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"recieve command: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">char</span> commlog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"parsed command: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">char</span> castlog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"cast command: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">char</span> connlog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"usbkey connect response: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">char</span> snlog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"usbkey sn response: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">char</span> idlog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"usbkey id number response: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">char</span> fplog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"usbkey fingerprint response: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">char</span> dellog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"usbkey delete fingerprint response: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">char</span> verifylog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"usbkey verify response: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">char</span> inlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接收字符串长度</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//char message [] = \"&#123;\\\"text\\\": \\\"hello chrome extension\\\"&#125;\"; // 例子</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">//char message[] = \"&#123;\\\"command\\\": \\\"collFingerprint\\\", \\\"res\\\": &#123;\\\"code\\\":\\\"0\\\",\\\"content\\\":\\\"collect fingerprint failure!\\\"&#125;&#125;\";</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 设置数据流模式模式为二进制流</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">_setmode</span><span class=\"token punctuation\">(</span> <span class=\"token function\">_fileno</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">stdin</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _O_BINARY <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> result <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot set mode\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tWLinst <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"natcud.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>WLinst <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tCONNECTPROC ffconnect<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>CONNECTPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>WLinst<span class=\"token punctuation\">,</span><span class=\"token string\">\"ffconnect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tCOLLSNPROC collsn<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>COLLSNPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>WLinst<span class=\"token punctuation\">,</span><span class=\"token string\">\"collTerminalSN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tCOLLIDPROC collid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>COLLIDPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>WLinst<span class=\"token punctuation\">,</span><span class=\"token string\">\"collIdNumber\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tCOLLFPRPROC collfp<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>COLLFPRPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>WLinst<span class=\"token punctuation\">,</span><span class=\"token string\">\"collFingerPrint\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tDELFPPROC delfp<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>DELFPPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>WLinst<span class=\"token punctuation\">,</span><span class=\"token string\">\"deleteFingerprints\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tVERIFYPROC verify<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>VERIFYPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>WLinst<span class=\"token punctuation\">,</span><span class=\"token string\">\"verify\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> tmpcomm <span class=\"token operator\">=</span> <span class=\"token function\">get_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>reclog<span class=\"token punctuation\">,</span> tmpcomm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>reclog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>tmpcomm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>castlog<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>castlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">//std::string command = \"&#123;\\\"command\\\":\\\"collTerminalSN\\\"&#125;\";</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">//\tstd::string command = \"&#123;\\\"command\\\": \\\"collTerminalSN\\\"&#125;\";</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">//std::string command = \"&#123;\\\"command\\\": \\\"collIdNumber\\\",\\\"req\\\": &#123;\\\"serial\\\": \\\"32016225\\\",\\\"idNumber\\\": \\\"411481199110128450\\\"&#125;&#125;\";</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">//std::string command = \"&#123;\\\"command\\\": \\\"collFingerprint\\\",\\\"req\\\": &#123;\\\"serial\\\": \\\"32016225\\\"&#125;&#125;\";</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">//std::string command = \"&#123;\\\"command\\\": \\\"collFingerprint\\\",\\\"req\\\": &#123;\\\"serial\\\": \\\"32016225\\\",\\\"fingerNo\\\": \\\"\\\"&#125;&#125;\";</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token comment\">//std::string command = \"&#123;\\\"command\\\": \\\"deleteFingerprints\\\",\\\"req\\\": &#123;\\\"serial\\\": \\\"32016225\\\"&#125;&#125;\";</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">// 指令判断处理 ..........................</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token comment\">//std::string command = \"&#123;\\\"command\\\": \\\"verify\\\",\\\"req\\\": &#123;\\\"serial\\\": \\\"30077052\\\"&#125;&#125;\";</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t <span class=\"token comment\">//std::string command = \"&#123;\\\"cmd\\\": \\\"f\\\",\\\"req\\\": &#123;\\\"s\\\": \\\"30077052\\\",\\\"f\\\": 1&#125;&#125;\";</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tJson<span class=\"token double-colon punctuation\">::</span>Value jData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tJson<span class=\"token double-colon punctuation\">::</span>Reader reader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\treader<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span>jData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\tstring comname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>jData<span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>commlog<span class=\"token punctuation\">,</span> comname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>comname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stricmp</span><span class=\"token punctuation\">(</span>comname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rdata <span class=\"token operator\">=</span> <span class=\"token function\">ffconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token comment\">// 写日志</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>connlog<span class=\"token punctuation\">,</span> rdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>connlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> comname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"res\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\troot<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string rtnOut <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\tstring rtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtnOut<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\trtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stricmp</span><span class=\"token punctuation\">(</span>comname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sn\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rdata <span class=\"token operator\">=</span> <span class=\"token function\">collsn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token comment\">// 写日志</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>snlog<span class=\"token punctuation\">,</span> rdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>snlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> comname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"res\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\troot<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string rtnOut <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\tstring rtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtnOut<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\trtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t<span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stricmp</span><span class=\"token punctuation\">(</span>comname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token comment\">// 读取 json 子结构</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value reqData<span class=\"token operator\">=</span>jData<span class=\"token punctuation\">[</span><span class=\"token string\">\"req\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token comment\">//\t\tstring req=jData[\"command\"].asString().c_str();</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\tstring req <span class=\"token operator\">=</span> reqData<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换成字符串</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rdata <span class=\"token operator\">=</span> <span class=\"token function\">collid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t<span class=\"token comment\">// 写日志</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>idlog<span class=\"token punctuation\">,</span> rdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>idlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> comname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"res\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\troot<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string rtnOut <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\tstring rtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtnOut<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\trtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stricmp</span><span class=\"token punctuation\">(</span>comname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value reqData <span class=\"token operator\">=</span> jData<span class=\"token punctuation\">[</span><span class=\"token string\">\"req\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\tstring req <span class=\"token operator\">=</span> reqData<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换成字符串</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t<span class=\"token comment\">//char * req=(char *).asString().c_str();</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rdata <span class=\"token operator\">=</span> <span class=\"token function\">collfp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t<span class=\"token comment\">// 写日志</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>fplog<span class=\"token punctuation\">,</span> rdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>fplog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> comname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"res\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token comment\">//\troot.toStyledString();</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string rtnOut <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\tstring rtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtnOut<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\trtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t<span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stricmp</span><span class=\"token punctuation\">(</span>comname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"verify\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value reqData <span class=\"token operator\">=</span> jData<span class=\"token punctuation\">[</span><span class=\"token string\">\"req\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\tstring req <span class=\"token operator\">=</span> reqData<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换成字符串</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t<span class=\"token comment\">// char * req=(char *)jData[\"req\"].asString().c_str();</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rdata <span class=\"token operator\">=</span> <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value rtnData <span class=\"token operator\">=</span> rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t\tstring _rtnData <span class=\"token operator\">=</span> rtnData<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\t<span class=\"token comment\">// 写日志</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>verifylog<span class=\"token punctuation\">,</span> rdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>verifylog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> comname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"res\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\troot<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string rtnOut <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\tstring rtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtnOut<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\trtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t<span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stricmp</span><span class=\"token punctuation\">(</span>comname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"delf\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value reqData <span class=\"token operator\">=</span> jData<span class=\"token punctuation\">[</span><span class=\"token string\">\"req\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t\tstring req <span class=\"token operator\">=</span> reqData<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换成字符串</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t\t<span class=\"token comment\">// char * req=(char *)jData[\"req\"].asString().c_str();</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rdata <span class=\"token operator\">=</span> <span class=\"token function\">delfp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\t\t<span class=\"token comment\">// 写日志</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>dellog<span class=\"token punctuation\">,</span> rdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>\t\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>dellog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\t\tJson<span class=\"token double-colon punctuation\">::</span>Value res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> comname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t\troot<span class=\"token punctuation\">[</span><span class=\"token string\">\"res\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t\troot<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string rtnOut <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t\tstring rtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtnOut<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t\trtn <span class=\"token operator\">=</span> <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t\t<span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span>rtn<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> msg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"command failure, exit\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>\t<span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exit program\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token comment\">// 读取标准输入的数据</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">get_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从接收字符串中前 4 个字节读取的数据长度</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token keyword\">char</span> log<span class=\"token punctuation\">[</span>MAX_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 日志</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token keyword\">char</span> log_len<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 日值输出读取字符串的长度，临时值。</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环初始值</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>    <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token comment\">// 读取数据流长度</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token comment\">//l = char2hex(getchar());</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        l <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>        len <span class=\"token operator\">+=</span> l<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>    <span class=\"token comment\">// 失败返回</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read error,len is 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>        <span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read error,len is 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">,</span> <span class=\"token string\">\"read len is \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>log_len<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">,</span> log_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>    <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    <span class=\"token comment\">// 读取数据流内容</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>g_input<span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>        <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>g_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>        <span class=\"token keyword\">return</span> g_input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>    <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read content error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>    <span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read content error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">out_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将要输出的字符串的长度</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>    <span class=\"token keyword\">char</span> protocol_len<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按照交互协调协议转换后，协议中的输出字符串长度</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>    <span class=\"token keyword\">char</span> out_all<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出的所有字符串</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>    <span class=\"token keyword\">char</span> log_len<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 日志中输出的字符串长度</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>    <span class=\"token keyword\">char</span> log<span class=\"token punctuation\">[</span>MAX_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 日志内容</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        <span class=\"token comment\">// 输出消息为空</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>        <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_write NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>\t<span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>    len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre><span class=\"token comment\">//    printf(\"%zu\",len);</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        <span class=\"token comment\">// 长度为空</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_write len is 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">,</span> <span class=\"token string\">\"out_write content len is \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>log_len<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">,</span> log_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>    <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"295\"></td><td><pre>    for(i = 0; i &lt; 4; i++)&#123;</pre></td></tr><tr><td data-num=\"296\"></td><td><pre>        protocol_len[i] = (char)((len >> (i * 8)) &amp; 0xFF);</pre></td></tr><tr><td data-num=\"297\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"298\"></td><td><pre>    strcpy(out_all,protocol_len);</pre></td></tr><tr><td data-num=\"299\"></td><td><pre>    arr_cat(out_all,4,message, len);</pre></td></tr><tr><td data-num=\"300\"></td><td><pre>    fwrite(out_all, sizeof(char),  4+len,  stdout);</pre></td></tr><tr><td data-num=\"301\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"303\"></td><td><pre>    <span class=\"token comment\">// We need to send the 4 bytes of length information</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c%c%c%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">>></span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>    <span class=\"token comment\">// Now we can output our message</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>\t<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  len<span class=\"token punctuation\">,</span>  <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>    <span class=\"token comment\">//printf(\"%s\", message);</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>    <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>    <span class=\"token comment\">// 刷新输出缓冲区，以确保消息立即被发送</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre></pre></td></tr><tr><td data-num=\"317\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">write_log_file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>    FILE <span class=\"token operator\">*</span>file <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>       <span class=\"token comment\">// exit(1);</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>\t<span class=\"token comment\">//if(file.isope</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> wlen <span class=\"token operator\">=</span> <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>\t<span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">!=</span> wlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>        <span class=\"token comment\">//exit(1);</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"330\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre><span class=\"token comment\">// 拼接数组</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">arr_cat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>    dest <span class=\"token operator\">=</span> dest <span class=\"token operator\">+</span> from<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>        <span class=\"token operator\">*</span>dest <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>        dest<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>        src<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>string <span class=\"token function\">replaceChar</span><span class=\"token punctuation\">(</span>string src<span class=\"token punctuation\">,</span> string sub<span class=\"token punctuation\">,</span> string dest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> slen <span class=\"token operator\">=</span> sub<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>\t\tsrc <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> slen<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre></pre></td></tr><tr><td data-num=\"361\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">handle_EOF</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>\t<span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span>MAX_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> MAX_LEN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>src <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>\t\t\tarr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>\t\t\tidx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>\t\tsrc<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>\tarr<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>\tdest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"解释\"><a class=\"anchor\" href=\"#解释\">#</a> 解释</h4>\n<ul>\n<li>\n<p>这段代码是一个使用 C++ 编写的 Windows 控制台应用程序，使用了 Windows API 和一个处理 JSON 数据的库（jsoncpp）。让我们逐个部分进行解释</p>\n<ol>\n<li>包含和定义：<br />\n代码包含了标准的 C/C++ 库（stdio.h、string.h 等）、Windows 特定的头文件（windows.h）以及 JSON 库的头文件（json/json.h）。<br />\n还有一些 #define 语句定义了常量，如 MAX_LEN。</li>\n<li>函数原型：<br />\n使用 typedef 声明了各种 Windows API 函数的原型。</li>\n<li>全局变量：<br />\ng_input 是一个全局数组，用于存储输入数据。<br />\nWLinst 是一个全局变量，用于保存已加载 DLL 的句柄。</li>\n<li>函数实现：<br />\nmain():<br />\n 这是程序的入口点。<br />\n将输入模式设置为二进制。<br />\n使用 LoadLibrary 加载了一个 DLL（natcud.dll）。<br />\n解析 JSON 输入，根据接收到的命令执行相应的函数，并生成适当的响应。<br />\n写入日志并发送响应到标准输出。</li>\n<li>实用函数：</li>\n</ol>\n<p>get_input ()：从标准输入读取输入数据，解析长度信息，然后相应地读取数据。<br />\nout_write ()：将输出数据写入标准输出，并附带长度信息。<br />\nwrite_log_file ()：将日志追加到名为 “data.txt” 的文件中。<br />\narr_cat ()：连接数组。<br />\nreplaceChar ()：替换字符串中的字符。<br />\nhandle_EOF ()：处理文件结束符（在代码中未使用）。<br />\n6. 总结：<br />\n业务逻辑：<br />\n程序以 JSON 格式接收命令，并执行从动态加载的 DLL（natcud.dll）中相应的函数。<br />\n命令包括连接、收集序列号、收集身份证号码、收集指纹、验证和删除指纹等操作。<br />\n7. 技术细节：<br />\n使用了 Windows 特定的函数和数据类型来进行输入 / 输出操作和动态加载库。<br />\n使用 jsoncpp 库进行 JSON 解析。<br />\n输入和输出以二进制模式处理。<br />\n日志写入到名为 “data.txt” 的文件中。<br />\n8. 改进的方向：<br />\n错误处理较为简单。可以实现更健壮的错误处理。<br />\n应考虑内存管理，特别是动态分配的内存。<br />\n代码结构可以改进，以提高可读性和可维护性。<br />\n可以添加单元测试，以确保功能的正确性。</p>\n</li>\n</ul>\n<h2 id=\"交互方式\"><a class=\"anchor\" href=\"#交互方式\">#</a> 交互方式</h2>\n<ol>\n<li>\n<h2 id=\"连接u盾\"><a class=\"anchor\" href=\"#连接u盾\">#</a> 连接 U 盾</h2>\n</li>\n<li>\n<p>采集 SN</p>\n</li>\n<li>\n<p>采集身份证号</p>\n</li>\n<li>\n<p>采集指纹</p>\n</li>\n<li>\n<p>删除指纹</p>\n</li>\n<li>\n<p>安全认证 (比对)</p>\n</li>\n<li>\n<p>删除身份证号</p>\n</li>\n</ol>\n<h2 id=\"遇到问题\"><a class=\"anchor\" href=\"#遇到问题\">#</a> 遇到问题</h2>\n<ol>\n<li>C++ 解决报错无法打开源文件 #include &lt;json/json.h&gt;\n<ul>\n<li>问题截图<br />\n<img data-src=\"/img/%E8%83%BD%E6%BA%90%E4%BA%92%E8%81%94%E7%BD%91/U%E7%9B%BE/json.h%E5%A4%B4%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98.png\" alt=\"json/json.h\" /></li>\n<li>解决步骤\n<ol>\n<li>安装 vcpkg\n<ul>\n<li>git clone <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92Y3BrZy5naXQ=\">https://github.com/microsoft/vcpkg.git</span></li>\n<li>cd vcpkg &amp;&amp; bootstrap-vcpkg.bat</li>\n</ul>\n</li>\n<li>安装报错依赖包</li>\n<li>在 Visual Studio 中添加刚才生成的目录</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "熟悉项目"
            ]
        }
    ]
}