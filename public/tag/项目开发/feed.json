{
    "version": "https://jsonfeed.org/version/1",
    "title": "流年印记 • All posts by \"项目开发\" tag",
    "description": "数学 & 软件工程",
    "home_page_url": "https://hk2012.github.io",
    "items": [
        {
            "id": "https://hk2012.github.io/2024/04/25/note/u%E7%9B%BE%E6%B5%8B%E8%AF%95/",
            "url": "https://hk2012.github.io/2024/04/25/note/u%E7%9B%BE%E6%B5%8B%E8%AF%95/",
            "title": "U盾测试",
            "date_published": "2024-04-25T01:05:00.000Z",
            "content_html": "<h1 id=\"前端网址\"><a class=\"anchor\" href=\"#前端网址\">#</a> 前端网址</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovLzEwMy4yMS4xMTkuODQ6MTcwMDAvbWVzc2FnZS9tZXNzYWdldjIuaHRtbA==\">http://103.21.119.84:17000/message/messagev2.html</span></li>\n</ul>\n<h1 id=\"情况异常\"><a class=\"anchor\" href=\"#情况异常\">#</a> 情况异常</h1>\n<h2 id=\"第一种情况-可以复现\"><a class=\"anchor\" href=\"#第一种情况-可以复现\">#</a> 第一种情况 (可以复现)</h2>\n<ol>\n<li>采集指纹一 （食指）</li>\n<li>采集指纹二  (中指)</li>\n<li>删除指纹\n<ul>\n<li><img data-src=\"/img/%E8%83%BD%E6%BA%90%E4%BA%92%E8%81%94%E7%BD%91/U%E7%9B%BE/u%E7%9B%BE%E6%B5%8B%E8%AF%95%E6%83%85%E5%86%B5%E4%B8%80.png\" alt=\"u盾测试情况一\" /></li>\n</ul>\n</li>\n<li>认证指纹 (食指)  -&gt; 成功</li>\n<li>认证指纹 (中指)  -&gt; 成功</li>\n<li>刷新页面后 再次点击删除\n<ul>\n<li><img data-src=\"/img/%E8%83%BD%E6%BA%90%E4%BA%92%E8%81%94%E7%BD%91/U%E7%9B%BE/u%E7%9B%BE%E6%B5%8B%E8%AF%95%E4%B8%80%E5%88%B7%E6%96%B0%E5%90%8E.png\" alt=\"u盾测试一刷新后\" /></li>\n</ul>\n</li>\n<li>最后删除成功</li>\n</ol>\n<ul>\n<li>总结： 在页面不刷新的情况下，删除一次和删除多次情况是一样的，都是可以匹配上的</li>\n<li>原因：在页面刷新后，</li>\n</ul>\n<h2 id=\"第二种情况\"><a class=\"anchor\" href=\"#第二种情况\">#</a> 第二种情况</h2>\n<ol>\n<li>采集指纹一 （食指）</li>\n<li>采集指纹二  (中指)</li>\n<li>采集指纹二  (无名指)</li>\n<li>采集指纹二  (小指)</li>\n<li>四个手指的指纹都可以匹配上</li>\n</ol>\n<h2 id=\"第三种情况\"><a class=\"anchor\" href=\"#第三种情况\">#</a> 第三种情况</h2>\n<ol>\n<li>在认证步骤连续点击两次认证情况，会发生 <span class=\"blue\">下发</span>与<span class=\"red\">认证</span>错乱.</li>\n<li>在认证超时之后，指纹后录入情况，会发生 <span class=\"blue\">下发</span>与<span class=\"red\">认证</span>错乱.</li>\n</ol>\n<h1 id=\"交互方式\"><a class=\"anchor\" href=\"#交互方式\">#</a> 交互方式</h1>\n<ol>\n<li>连接 U 盾\n<ul>\n<li>测试 u 盾连接情况</li>\n</ul>\n</li>\n<li>采集 SN\n<ul>\n<li>获取安全 U 盾编号</li>\n</ul>\n</li>\n<li>采集身份证号\n<ul>\n<li>待开发</li>\n</ul>\n</li>\n<li>采集指纹\n<ul>\n<li>录入指纹一 和 指纹二 ，并存入 U 盾模组</li>\n</ul>\n</li>\n<li>删除指纹\n<ul>\n<li>将之前存储在模组中的指纹信息给删除 （<span class=\"red\">全部清空</span>）</li>\n</ul>\n</li>\n<li>安全认证 (比对)\n<ol>\n<li>下发 FP_UP 指令 （指录入当前指纹）</li>\n<li>对比 （将当前指纹，与之前存入模组间的指纹匹配）</li>\n<li>删除当前指纹信息</li>\n</ol>\n</li>\n<li>删除身份证号\n<ul>\n<li>待开发</li>\n</ul>\n</li>\n<li>获取指纹信息\n<ul>\n<li>当前指纹如果匹配失败，可以根据 index 获取当前指纹信息</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果只录入一条指纹情况，错误指纹 index 如下</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>verify finger info one index<span class=\"token operator\">:</span> <span class=\"token number\">116</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>如果录入两条指纹情况，错误指纹 index 如下</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>verify finger info more index<span class=\"token operator\">:</span> <span class=\"token number\">100</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"指令\"><a class=\"anchor\" href=\"#指令\">#</a> 指令</h1>\n<ul>\n<li>侦测到指纹指令\n<ul>\n<li>CMD_FP_DETECT</li>\n<li>0x50</li>\n</ul>\n</li>\n<li>指纹采集指令 - 仅要求比对结果\n<ul>\n<li>CMD_FP_CHECH</li>\n<li>0x50</li>\n</ul>\n</li>\n<li>指纹采集指令 - 指纹信息传输指令，从 host 传输到指纹终端用于比对\n<ul>\n<li>CMD_FP_TRANS</li>\n<li>0x50</li>\n</ul>\n</li>\n<li>指纹采集指令 - 根据指纹索引号，获取 0x50 0x17 下发的指纹信息\n<ul>\n<li>CMD_FP_GET</li>\n<li>0x50</li>\n</ul>\n</li>\n<li>指纹采集指令 - 采集指纹信息注册到指纹模组\n<ul>\n<li>CMD_FP_REG</li>\n<li>0x50</li>\n</ul>\n</li>\n<li>指纹采集指令 - 删除指纹指令\n<ul>\n<li>CMD_FP_DEL</li>\n<li>0x50</li>\n</ul>\n</li>\n<li>获取指纹模组序列 ID 指令\n<ul>\n<li>CMD_FPRS_CHIPID</li>\n<li>0x50</li>\n</ul>\n</li>\n<li>设置指纹模组序列 ID 指令\n<ul>\n<li>CMD_FPWS_CHIPID</li>\n<li>0x50</li>\n</ul>\n</li>\n<li>设置 / 读取 SN\n<ul>\n<li>CMD_CONFIG_CMD</li>\n</ul>\n</li>\n<li>删除保存的身份证信息\n<ul>\n<li>CMD_DEL_ID</li>\n</ul>\n</li>\n<li>保存身份证信息\n<ul>\n<li>CMD_ADD_ID</li>\n</ul>\n</li>\n<li>读取保存的身份证信息\n<ul>\n<li>CMD_RDSA_ID</li>\n</ul>\n</li>\n<li>设置标识信息\n<ul>\n<li>CMD_ADD_FLAG</li>\n</ul>\n</li>\n<li>读取标识标识\n<ul>\n<li>CMD_RD_FLAG</li>\n</ul>\n</li>\n<li>蜂鸣器操作\n<ul>\n<li>CMD_BUZZER</li>\n</ul>\n</li>\n</ul>\n<p>0x7c<br />\n0x7d<br />\n0x7E<br />\n0x7F<br />\n0x80<br />\n0x81<br />\n0x51</p>\n<p>0x10 （0x01||0x00）<br />\n0x11 （0x01||0x00）<br />\n0x17 （0x01||0x00） 0xXX 0xXX (两个字节指纹信息长度) 0xXX 0xXX 0xXX ... 指纹信息<br />\n 0x18 （0x01||0x00）0xII 0xII (指纹索引) 0xXX 0xXX（两字节信息长度）0xXX 0xXX 0xXX ... 指纹信息<br />\n 0x12 （0x01||0x00）0xII 0xII (指纹索引)  0xXX 0xXX（两字节信息长度）0xXX 0xXX 0xXX ... 指纹信息<br />\n 0x13 （0x01||0x00） 0xXX 0xXX 0xYY 0xYY<br />\n0x14 （0x01||0x00）（16 个字节）<br />\n0x15 （0x01||0x00）（16 个字节）</p>\n<p>SUBCMD+LEN+DATA<br />\n0（1 字节数据，值为 0，表示清除设备中保存的数据）<br />\n18 字节身份证号<br />\n 0x7F 0xXX 0xXX ...（18 位身份证号码）<br />\n0x80 (0x01||0x00) 0xXX 0xXX ...（16 位信息标识）<br />\n0x81 0xXX 0xXX ...（16 位信息标识）<br />\n1 - 长响 1 声，用于操作成功情况下；2 - 连续短响 2 声，用于出现错误情况下；</p>\n<p>指纹模组发送给上位机表示指纹模组侦测到指纹，上位机发送给指纹模组表示上位查询指纹信息 0x00 - 无 0x01 - 有<br />\n &quot; 上位机发送到指纹模组表示需要进行用户指纹或身份证认证，指令：0x11;<br />\n 指纹模组发送给上位机表示认证结果：0x00 - 失败 0x01 - 成功<br />\n指令：0x11 0x01||0x00 (成功 || 失败)<br />\n 认证完成后，需要上位机发送删除指纹指令，清除指纹模组中缓存的指纹信息，指纹索引是 0x00 0x64 至 0x01 0xF4，删除指纹指令：0x13&quot;<br />\n&quot; 上位机发送到指纹模组表示传输指纹信息，指令：0x17 0xXX 0xXX (两个字节指纹信息长度) 0xXX 0xXX 0xXX ... 指纹信息<br />\n指纹模组发送给上位机表示指纹传输结果 (0x00 - 失败 0x01 - 成功)<br />\n 指令：0x17 0x01||0x00 (成功 || 失败) (0xII 0xXII)(上传成功后，终端保存指纹信息，并返回保存两个指纹信息的索引号)&quot;<br />\n&quot; 上位机发送到指纹模组表示获取 0x50 0x17 指令上送至终端的指纹信息，指令：0x18 0xII 0xII 两位指纹索引<br />\n指纹模组发送给上位机表示获取指纹信息结果与指纹信息 (0x00 - 失败 0x01 - 成功)<br />\n 指令：0x18 0x01||0x00 (成功 || 失败) 0xII 0xII (指纹索引) 0xXX 0xXX (两个字节指纹信息长度) 0xXX 0xXX 0xXX ... 指纹信息<br />\n指纹数据长度一般是 1008 个字节，预留 2024 个字节 &quot;<br />\n&quot; 上位机发送到指纹模组表示采集指纹信息，指令：0x12 （0x00||0xAA） 注：0x00: 表示终端不需要保存指纹信息；0xAA：表示终端需要保存指纹信息<br />\n指纹模组发送给上位机表示采集指纹信息结果与指纹信息 (0x00 - 失败 0x01 - 成功)<br />\n 指令：0x12 0x01||0x00 (成功 || 失败) 0xII 0xII (指纹索引) 0xXX 0xXX (两个字节指纹信息长度) 0xXX 0xXX 0xXX ... 指纹信息<br />\n注：当终端不需要指纹信息时，指纹索引为 0x00 0x00<br />\n 指纹数据长度一般是 1008 个字节，预留 2024 个字节 &quot;<br />\n&quot; 上位机发送给指纹模组表示需要删除指纹：指令：0x13 0xXX 0xXX 0xYY 0xYY<br />\n0xXX 0xXX：两字节删除指纹开始索引；<br />\n0xYY 0xYY：两字节删除指纹结束索引；<br />\n 删除相同指纹时，0xXX 0xXX： == 0xYY 0xYY<br />\n 指纹模组发送给上位机表示删除指纹结果；指令：0x13 0x01||0x00 (成功 || 失败)&quot;</p>\n<p>设置时，直接 16 个；</p>\n<p>SUBCMD：0 - 读取 SN，1 - 设置 SN；LEN：SN 数据的长度；DATA：SN 的内容；<br />\n删除保存的身份证信息</p>\n<p>&quot; 上位机发送到设备表示读取设备中保存的身份证号信息，指令：0x7F<br />\n 设备发送给上位机表示读取结果<br />\n指令：0x7F  0xXX 0xXX ...（18 位身份证号码）如果设备中没有保存身份证信息，则身份证号码是 18 个 0xFF&quot;<br />\n&quot; 上位机发送到设备表示设置标识信息，指令：0x80 0xXX 0xXX ...（16 位信息标识）<br />\n设备发送给上位机表示设置结果<br />\n指令：0x80  0x01||0x00    注：0x01 - 成功 0x00 - 失败 &quot;<br />\n&quot; 上位机发送到设备表示读取标识信息，指令：0x81<br />\n 设备发送给上位机表示读取结果<br />\n指令：0x81 0xXX 0xXX ...（16 位信息标识）    注：失败 - 16 个 0xFF&quot;</p>\n",
            "tags": [
                "项目开发"
            ]
        },
        {
            "id": "https://hk2012.github.io/2024/04/10/course/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%BC%80%E5%8F%91/",
            "url": "https://hk2012.github.io/2024/04/10/course/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%BC%80%E5%8F%91/",
            "title": "嵌入式学习和开发",
            "date_published": "2024-04-10T03:10:00.000Z",
            "content_html": "<h2 id=\"基础知识\"><a class=\"anchor\" href=\"#基础知识\">#</a> 基础知识</h2>\n<h3 id=\"常见问题\"><a class=\"anchor\" href=\"#常见问题\">#</a> 常见问题</h3>\n<h4 id=\"数字含义\"><a class=\"anchor\" href=\"#数字含义\">#</a> 数字含义</h4>\n<ul>\n<li>条件判断、逻辑运算等方面的约定俗成的惯例\n<ol>\n<li>1 表示真或者真值。</li>\n<li>0 表示假或者假值。</li>\n</ol>\n</li>\n<li>函数的返回值\n<ol>\n<li>0 表示成功，</li>\n<li>非 0 表示失败</li>\n</ol>\n</li>\n</ul>\n<p>main 函数 return 0, 代表成功还是失败</p>\n<h4 id=\"内存管理\"><a class=\"anchor\" href=\"#内存管理\">#</a> 内存管理</h4>\n<ol start=\"3\">\n<li>\n<p>malloc ()： 用于动态分配内存空间。其原型为 void* malloc (size_t size)，其中 size 参数表示需要分配的字节数。malloc () 返回一个指向分配内存起始地址的指针，如果分配失败，则返回 NULL。</p>\n</li>\n<li>\n<p>calloc ()： 用于动态分配并初始化内存空间。其原型为 void* calloc (size_t num, size_t size)，其中 num 为元素个数，size 为每个元素的大小。calloc () 返回一个指向分配内存起始地址的指针，如果分配失败，则返回 NULL。与 malloc () 不同的是，calloc () 分配的内存会被初始化为零。</p>\n</li>\n<li>\n<p>realloc ()： 用于重新分配已分配内存的大小。其原型为 void* realloc (void* ptr, size_t size)，其中 ptr 是之前分配内存的指针，size 是重新分配的字节数。如果分配成功，则返回一个指向新分配内存起始地址的指针，如果分配失败，则返回 NULL。注意，如果重新分配失败，原始内存块仍然保持不变，不会被释放。</p>\n</li>\n<li>\n<p>free ()： 用于释放动态分配的内存空间。其原型为 void free (void* ptr)，其中 ptr 是需要释放的内存块的指针。一旦释放，该内存块就可以被重新分配或使用。</p>\n<ul>\n<li>代码示例</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使用 malloc () 分配 5 个整型空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ptr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内存分配失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 使用 calloc () 分配 3 个整型空间，并初始化为 0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ptr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr2 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内存分配失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放之前分配的内存</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 使用 realloc () 扩展 ptr1 指向的内存空间为 8 个整型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    ptr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr3 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内存分配失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放之前分配的内存</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放之前分配的内存</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        ptr1 <span class=\"token operator\">=</span> ptr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使 ptr1 指向扩展后的内存空间</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>在这个示例中，我们：</p>\n<ol>\n<li>使用 malloc () 分配了一块大小为 5 个整型的内存空间，并将其指针赋给 ptr1。</li>\n<li>使用 calloc () 分配了一块大小为 3 个整型的内存空间，并将其指针赋给 ptr2。</li>\n<li>使用 realloc () 对 ptr1 指向的内存空间进行了扩展，使其大小为 8 个整型，并将扩展后的指针赋给 ptr3。</li>\n<li>最后，我们释放了分配的内存空间，以避免内存泄漏。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"指针基础知识\"><a class=\"anchor\" href=\"#指针基础知识\">#</a> 指针基础知识</h3>\n<ul>\n<li>\n<p>基础知识：</p>\n<ol>\n<li>指针变量： 指针变量是用来存储内存地址的变量。声明一个指针变量时，需要指定指针变量的类型，表示它所指向的数据的类型。</li>\n<li>取址运算符 (&amp;)： 取址运算符用于获取变量的内存地址。例如，&amp;a 表示变量 a 的地址。</li>\n<li>间接访问运算符 (*)： 间接访问运算符用于获取指针所指向的数据。例如，*ptr 表示获取指针 ptr 所指向的数据。</li>\n<li>空指针 (NULL)： 空指针是一个特殊的指针值，表示不指向任何有效的内存地址。在 C 语言中，可以使用 NULL 宏来表示空指针。</li>\n<li>指针算术： 指针可以进行算术运算，例如加法、减法等，用来移动指针的位置。</li>\n</ol>\n<ul>\n<li>示例：下面是一个关于一级指针和二级指针的示例：<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一级指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二级指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 将 num 的地址赋给 ptr1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ptr1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将 ptr1 的地址赋给 ptr2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ptr2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 输出 num 的值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num 的值为：%d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 使用一级指针访问 num 的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过一级指针访问 num 的值：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 使用二级指针访问 num 的值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过二级指针访问 num 的值：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>解释说明\n<ol>\n<li>我们首先声明了一个整型变量 num，并赋值为 10。</li>\n<li>然后声明了一个一级指针 ptr1，将 num 的地址赋给 ptr1。</li>\n<li>接着声明了一个二级指针 ptr2，将 ptr1 的地址赋给 ptr2。</li>\n<li>最后通过一级指针和二级指针分别访问了 num 的值，输出结果相同，都为 10。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>示例：下面是一个示例，演示了数组指针、函数指针以及容易混淆的指针写法：<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 数组指针示例</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组名即为数组首元素的地址，ptr_arr 指向数组 arr 的第一个元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组第一个元素的值：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr_arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出数组第一个元素的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 函数指针示例</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明一个指向接受两个整型参数、返回整型的函数指针</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    func_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>add<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数名即为函数的地址，func_ptr 指向函数 add</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add(3, 4) 的结果：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">func_ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用函数指针执行 add (3, 4)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    func_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>subtract<span class=\"token punctuation\">;</span> <span class=\"token comment\">//func_ptr 指向函数 subtract</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subtract(5, 2) 的结果：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">func_ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用函数指针执行 subtract (5, 2)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 容易混淆的指针写法示例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1<span class=\"token punctuation\">,</span> ptr2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里 ptr1 是指针变量，ptr2 是整型变量，而不是两个指针变量</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    ptr1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ptr2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1 指向的值：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出指针变量 ptr1 指向的值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr2 的值：%d\\n\"</span><span class=\"token punctuation\">,</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出整型变量 ptr2 的值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 函数定义</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>解释说明\n<ol>\n<li>首先定义了一个整型数组 arr，然后声明了一个指向整型数组的指针 ptr_arr，并将数组 arr 的首地址赋值给了 ptr_arr。通过 ptr_arr 指针可以访问数组中的元素。</li>\n<li>然后定义了两个函数 add 和 subtract，用来执行加法和减法操作。接着声明了一个函数指针 func_ptr，并通过赋值将其指向了 add 和 subtract 函数。通过 func_ptr 指针可以动态调用这两个函数。</li>\n<li>最后演示了容易混淆的指针写法，声明了一个指针变量 ptr1 和一个整型变量 ptr2。在这种写法中，需要注意变量的声明方式，以避免产生混淆。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"嵌入式开发的编程语言\"><a class=\"anchor\" href=\"#嵌入式开发的编程语言\">#</a> 嵌入式开发的编程语言</h2>\n<ul>\n<li>\n<p>C 语言：</p>\n<ul>\n<li>优点：<br />\n足够底层，直接操作硬件，对于资源受限的嵌入式系统更加适用。<br />\n通常编译后的代码较小，执行速度较快。<br />\n更接近硬件的抽象层，对于对内存、CPU 等底层资源的控制更为直接。</li>\n<li>缺点：<br />\n缺乏面向对象的特性，不够抽象，有时可能会导致代码复杂度较高。<br />\n不够灵活，需要手动管理内存，容易出现内存泄漏和指针错误。</li>\n</ul>\n</li>\n<li>\n<p>C++：</p>\n<ul>\n<li>优点：<br />\n支持面向对象编程，具有封装、继承和多态等特性，使代码更加模块化和可维护。<br />\n有丰富的标准库和第三方库，提供了更多高级的数据结构和算法。<br />\n拥有更多的编程范式，如模板元编程等，能够提供更好的代码重用和泛化能力。</li>\n<li>缺点：<br />\n生成的代码通常较大，可能会增加系统的资源消耗。<br />\n需要更多的运行时支持，对于资源受限的嵌入式系统可能不够适用。<br />\nC++ 的复杂性可能会导致开发过程更为繁琐，需要更多的学习和理解。</li>\n</ul>\n</li>\n<li>\n<p>综合考虑，对于资源受限的嵌入式系统，或者对性能和资源消耗要求较高的应用场景，C 语言可能更为合适。而对于需要更高层次抽象和更灵活的编程模型的应用，以及对代码的可维护性和可重用性有更高要求的项目，C++ 可能更适合。</p>\n</li>\n<li>\n<p>使用方式</p>\n</li>\n<li>\n<p>浏览模式</p>\n</li>\n<li>\n<p>如何编译</p>\n</li>\n</ul>\n",
            "tags": [
                "项目开发"
            ]
        }
    ]
}